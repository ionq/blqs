import inspect
import traceback

from typing import Any, Dict, Optional


class GeneratedCodeException(Exception):
    def __init__(self, exception: Exception, lineno: Optional[int], filename: Optional[str]):
        """An exception raised when blqs generated code throws an exception.

        This exception allows for a description of where the original exception occurred when
        the exception is thrown from generated code (which is located in a temporary file).

        Args:
            exception: The original exception to be wrapped.
            lineno: The line number of the code that generated the code that threw the exception.
                Can be None if this could not be determined.
            filename: The filename of the code that generated the code that threw the exception.
                Can be None if this could note be determined.
        """
        self._exception = exception
        self._lineno = lineno
        self._filename = filename

    def __str__(self):
        filename_str = self._filename or "<could not be determined>"
        lineno_str = str(self._lineno) if self._lineno is not None else "<could not be determined>"
        tb = getattr(self._exception, "__traceback__", None)
        tb_str = (
            traceback.format_tb(self._exception.__traceback__)[-1]
            if tb is not None
            else "<could not be determined>\n"
        )

        return (
            "Exception in code generated by blqs.\n\nIn the stack trace below for the frame\n"
            f"{tb_str}the file and line number are not the ones listed, but instead "
            f'are "{filename_str}" and {lineno_str}, respectively.'
        )

    def exception(self) -> Exception:
        return self._exception

    def filename(self) -> Optional[str]:
        return self._filename

    def lineno(self) -> Optional[int]:
        return self._lineno


def _raise_with_line_mapping(e: Exception, obj: Any, line_map: Dict[int, int]):
    """Raise the given exception with information about the original location of the exception.

    If an exception is raised in generated code, this will add a cause that describes the
    original location of the code that produced the generated code. This is a best effort, if
    the traceback is missing or does not have a line number, or inspect cannot determine the
    filename and line number of the original object, this will still add the cause, but without
    this information.

    Args:
        e: The exception to possibly add a cause for.
        obj: The original object from which code was generated. This is used to calculate offsets
            for line numbers.
        line_map: Map from the line number in the generated code to the line number in the
            original code that generated the code.

    Raises:
        e: The original exception. If it can be determined this exception has a cause of
            a `GeneratedCodeException` that contains information about the original file and
            line number of the code that generated the code that threw the exception.
    """
    offset_lineno = inspect.getsourcelines(obj)[-1]
    original_filename = inspect.getsourcefile(obj)

    last_tb = getattr(e, "__traceback__", None)
    while last_tb is not None and last_tb.tb_next is not None:
        last_tb = last_tb.tb_next
    last_lineno = last_tb.tb_lineno if last_tb is not None else None

    original_lineno = None
    if last_lineno in line_map and offset_lineno is not None:
        # -1 from adding two indices that start at 1, not 0.
        original_lineno = line_map[last_lineno] + offset_lineno - 1
    cause = GeneratedCodeException(e, original_lineno, original_filename)
    raise e from cause
