import traceback


class GeneratedCodeException(Exception):
    def __init__(self, cause: Exception, lineno: int, filename: str):
        """An exception raised when blqs generated code throws an exception.

        This exception allows for a description of where the original exception occurred when
        the exception is thrown from generated code (which is located in a temporary file).

        Args:
            cause: The original exception to be wrapped.
            lineno: The line number of the code that generated the code that threw the exception.
            filename: The filename of the code that generated the code that threw the exception.
        """
        self._cause = cause
        self._lineno = lineno
        self._filename = filename

    def __str__(self):
        last_traceback = traceback.format_tb(self._cause.__traceback__)[-1]
        return (
            "Exception in code generated by blqs.\n\nIn the stack trace below for the frame\n"
            f"{last_traceback}the file and line number are not the ones listed, but instead "
            f'are "{self._filename}" and {self._lineno}, respectively.'
        )

    def __eq__(self, other):
        if not isinstance(other, GeneratedCodeException):
            return NotImplemented
        return (
            self._cause == other._cause
            and self._lineno == other._lineno
            and self._filename == other._filename
        )

    def cause(self) -> Exception:
        return self._cause

    def filename(self) -> str:
        return self._filename

    def lineno(self) -> int:
        return self._lineno
